{"ast":null,"code":"import store from './store';\nconst state = store.getState();\nconst {\n  data\n} = state;\nexport const getBrandNames = store => {\n  let x = data.map(d => d.brand.name);\n  return new Set([...x]);\n};\nexport const maxPrice = store => {\n  let y = this.props.data.map(m => m.price.offer_price.value);\n  let val = y.reduce((accumulator, currentValue, idx) => {\n    if (idx === 0) {\n      accumulator = currentValue;\n      return accumulator;\n    } else return Math.max(accumulator, currentValue);\n  });\n};","map":{"version":3,"sources":["/home/rahul/Desktop/PROJECTS/online_clothing/frontend/src/redux/selectors.js"],"names":["store","state","getState","data","getBrandNames","x","map","d","brand","name","Set","maxPrice","y","props","m","price","offer_price","value","val","reduce","accumulator","currentValue","idx","Math","max"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,SAAlB;AACA,MAAMC,KAAK,GAAGD,KAAK,CAACE,QAAN,EAAd;AACA,MAAM;AAACC,EAAAA;AAAD,IAASF,KAAf;AAEA,OAAO,MAAMG,aAAa,GAAGJ,KAAK,IAAG;AACjC,MAAIK,CAAC,GAAGF,IAAI,CAACG,GAAL,CAASC,CAAC,IAAGA,CAAC,CAACC,KAAF,CAAQC,IAArB,CAAR;AACA,SAAO,IAAIC,GAAJ,CAAQ,CAAC,GAAGL,CAAJ,CAAR,CAAP;AACH,CAHM;AAKP,OAAO,MAAMM,QAAQ,GAAGX,KAAK,IAAG;AAC5B,MAAIY,CAAC,GAAG,KAAKC,KAAL,CAAWV,IAAX,CAAgBG,GAAhB,CAAoBQ,CAAC,IAAEA,CAAC,CAACC,KAAF,CAAQC,WAAR,CAAoBC,KAA3C,CAAR;AACI,MAAIC,GAAG,GAAGN,CAAC,CAACO,MAAF,CAAS,CAACC,WAAD,EAAaC,YAAb,EAA0BC,GAA1B,KAAiC;AAChD,QAAGA,GAAG,KAAK,CAAX,EAAa;AACbF,MAAAA,WAAW,GAAGC,YAAd;AACA,aAAOD,WAAP;AACC,KAHD,MAKA,OAAOG,IAAI,CAACC,GAAL,CAASJ,WAAT,EAAqBC,YAArB,CAAP;AACH,GAPS,CAAV;AAQP,CAVM","sourcesContent":["import store from './store';\nconst state = store.getState();\nconst {data} = state;\n\nexport const getBrandNames = store =>{\n    let x = data.map(d=> d.brand.name);\n    return new Set([...x]);\n}\n\nexport const maxPrice = store =>{\n    let y = this.props.data.map(m=>m.price.offer_price.value);\n        let val = y.reduce((accumulator,currentValue,idx)=> {\n            if(idx === 0){\n            accumulator = currentValue;\n            return accumulator        \n            }\n            else\n            return Math.max(accumulator,currentValue)\n        })\n}"]},"metadata":{},"sourceType":"module"}