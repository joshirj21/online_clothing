{"ast":null,"code":"const assert = require('assert');\n\nconst _ = require('lodash');\n\nconst spawn = require('spawn-command');\n\nconst treeKill = require('tree-kill');\n\nconst StripQuotes = require('./command-parser/strip-quotes');\n\nconst ExpandNpmShortcut = require('./command-parser/expand-npm-shortcut');\n\nconst ExpandNpmWildcard = require('./command-parser/expand-npm-wildcard');\n\nconst CompletionListener = require('./completion-listener');\n\nconst getSpawnOpts = require('./get-spawn-opts');\n\nconst Command = require('./command');\n\nconst defaults = {\n  spawn,\n  kill: treeKill,\n  raw: false,\n  controllers: []\n};\n\nmodule.exports = (commands, options) => {\n  assert.ok(Array.isArray(commands), '[concurrently] commands should be an array');\n  assert.notStrictEqual(commands.length, 0, '[concurrently] no commands provided');\n  options = _.defaults(options, defaults);\n  const commandParsers = [new StripQuotes(), new ExpandNpmShortcut(), new ExpandNpmWildcard()];\n  const spawnOpts = getSpawnOpts({\n    raw: options.raw\n  });\n  commands = _(commands).map(mapToCommandInfo).flatMap(command => parseCommand(command, commandParsers)).map((command, index) => new Command(Object.assign({\n    index,\n    spawnOpts,\n    killProcess: options.kill,\n    spawn: options.spawn\n  }, command))).value();\n  commands = options.controllers.reduce((prevCommands, controller) => controller.handle(prevCommands), commands);\n  commands.forEach(command => command.start());\n  return new CompletionListener({\n    successCondition: options.successCondition\n  }).listen(commands);\n};\n\nfunction mapToCommandInfo(command) {\n  return {\n    command: command.command || command,\n    name: command.name || '',\n    prefixColor: command.prefixColor || ''\n  };\n}\n\nfunction parseCommand(command, parsers) {\n  return parsers.reduce((commands, parser) => _.flatMap(commands, command => parser.parse(command)), _.castArray(command));\n}","map":{"version":3,"sources":["/home/rahul/Desktop/PROJECTS/online_clothing/node_modules/concurrently/src/concurrently.js"],"names":["assert","require","_","spawn","treeKill","StripQuotes","ExpandNpmShortcut","ExpandNpmWildcard","CompletionListener","getSpawnOpts","Command","defaults","kill","raw","controllers","module","exports","commands","options","ok","Array","isArray","notStrictEqual","length","commandParsers","spawnOpts","map","mapToCommandInfo","flatMap","command","parseCommand","index","Object","assign","killProcess","value","reduce","prevCommands","controller","handle","forEach","start","successCondition","listen","name","prefixColor","parsers","parser","parse","castArray"],"mappings":"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","sourcesContent":["const assert = require('assert');\nconst _ = require('lodash');\nconst spawn = require('spawn-command');\nconst treeKill = require('tree-kill');\n\nconst StripQuotes = require('./command-parser/strip-quotes');\nconst ExpandNpmShortcut = require('./command-parser/expand-npm-shortcut');\nconst ExpandNpmWildcard = require('./command-parser/expand-npm-wildcard');\n\nconst CompletionListener = require('./completion-listener');\n\nconst getSpawnOpts = require('./get-spawn-opts');\nconst Command = require('./command');\n\nconst defaults = {\n    spawn,\n    kill: treeKill,\n    raw: false,\n    controllers: []\n};\n\nmodule.exports = (commands, options) => {\n    assert.ok(Array.isArray(commands), '[concurrently] commands should be an array');\n    assert.notStrictEqual(commands.length, 0, '[concurrently] no commands provided');\n\n    options = _.defaults(options, defaults);\n\n    const commandParsers = [\n        new StripQuotes(),\n        new ExpandNpmShortcut(),\n        new ExpandNpmWildcard()\n    ];\n\n    const spawnOpts = getSpawnOpts({ raw: options.raw });\n\n    commands = _(commands)\n        .map(mapToCommandInfo)\n        .flatMap(command => parseCommand(command, commandParsers))\n        .map((command, index) => new Command(Object.assign({\n            index,\n            spawnOpts,\n            killProcess: options.kill,\n            spawn: options.spawn,\n        }, command)))\n        .value();\n\n    commands = options.controllers.reduce(\n        (prevCommands, controller) => controller.handle(prevCommands),\n        commands\n    );\n\n    commands.forEach(command => command.start());\n    return new CompletionListener({ successCondition: options.successCondition }).listen(commands);\n};\n\nfunction mapToCommandInfo(command) {\n    return {\n        command: command.command || command,\n        name: command.name || '',\n        prefixColor: command.prefixColor || '',\n    };\n}\n\nfunction parseCommand(command, parsers) {\n    return parsers.reduce(\n        (commands, parser) => _.flatMap(commands, command => parser.parse(command)),\n        _.castArray(command)\n    );\n}\n"]},"metadata":{},"sourceType":"script"}